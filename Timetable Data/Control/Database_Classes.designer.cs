#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Timetable_Data.Control
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Timsh")]
	public partial class Database_ClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLecture_Hall(Lecture_Hall instance);
    partial void UpdateLecture_Hall(Lecture_Hall instance);
    partial void DeleteLecture_Hall(Lecture_Hall instance);
    partial void InsertLecture_Time(Lecture_Time instance);
    partial void UpdateLecture_Time(Lecture_Time instance);
    partial void DeleteLecture_Time(Lecture_Time instance);
    partial void InsertLecturer(Lecturer instance);
    partial void UpdateLecturer(Lecturer instance);
    partial void DeleteLecturer(Lecturer instance);
    partial void InsertSelection_Lecturer(Selection_Lecturer instance);
    partial void UpdateSelection_Lecturer(Selection_Lecturer instance);
    partial void DeleteSelection_Lecturer(Selection_Lecturer instance);
    partial void InsertSelection_Time(Selection_Time instance);
    partial void UpdateSelection_Time(Selection_Time instance);
    partial void DeleteSelection_Time(Selection_Time instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertSubject_Selection(Subject_Selection instance);
    partial void UpdateSubject_Selection(Subject_Selection instance);
    partial void DeleteSubject_Selection(Subject_Selection instance);
    #endregion
		
		public Database_ClassesDataContext() : 
				base(global::Timetable_Data.Properties.Settings.Default.TimshConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Lecture_Hall> Lecture_Halls
		{
			get
			{
				return this.GetTable<Lecture_Hall>();
			}
		}
		
		public System.Data.Linq.Table<Lecture_Time> Lecture_Times
		{
			get
			{
				return this.GetTable<Lecture_Time>();
			}
		}
		
		public System.Data.Linq.Table<Lecturer> Lecturers
		{
			get
			{
				return this.GetTable<Lecturer>();
			}
		}
		
		public System.Data.Linq.Table<Selection_Lecturer> Selection_Lecturers
		{
			get
			{
				return this.GetTable<Selection_Lecturer>();
			}
		}
		
		public System.Data.Linq.Table<Selection_Time> Selection_Times
		{
			get
			{
				return this.GetTable<Selection_Time>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Subject_Selection> Subject_Selections
		{
			get
			{
				return this.GetTable<Subject_Selection>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecture_Hall")]
	public partial class Lecture_Hall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Building;
		
		private System.Nullable<int> _Floor;
		
		private string _Room;
		
		private EntitySet<Subject_Selection> _Subject_Selections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnFloorChanging(System.Nullable<int> value);
    partial void OnFloorChanged();
    partial void OnRoomChanging(string value);
    partial void OnRoomChanged();
    #endregion
		
		public Lecture_Hall()
		{
			this._Subject_Selections = new EntitySet<Subject_Selection>(new Action<Subject_Selection>(this.attach_Subject_Selections), new Action<Subject_Selection>(this.detach_Subject_Selections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(5)")]
		public string Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int")]
		public System.Nullable<int> Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="NVarChar(5)")]
		public string Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Hall_Subject_Selection", Storage="_Subject_Selections", ThisKey="Id", OtherKey="Hall_Id")]
		public EntitySet<Subject_Selection> Subject_Selections
		{
			get
			{
				return this._Subject_Selections;
			}
			set
			{
				this._Subject_Selections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subject_Selections(Subject_Selection entity)
		{
			this.SendPropertyChanging();
			entity.Lecture_Hall = this;
		}
		
		private void detach_Subject_Selections(Subject_Selection entity)
		{
			this.SendPropertyChanging();
			entity.Lecture_Hall = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecture_Time")]
	public partial class Lecture_Time : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Time;
		
		private EntitySet<Selection_Time> _Selection_Times;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    #endregion
		
		public Lecture_Time()
		{
			this._Selection_Times = new EntitySet<Selection_Time>(new Action<Selection_Time>(this.attach_Selection_Times), new Action<Selection_Time>(this.detach_Selection_Times));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Char(9)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Time_Selection_Time", Storage="_Selection_Times", ThisKey="Id", OtherKey="Lecture_Time_Id")]
		public EntitySet<Selection_Time> Selection_Times
		{
			get
			{
				return this._Selection_Times;
			}
			set
			{
				this._Selection_Times.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Selection_Times(Selection_Time entity)
		{
			this.SendPropertyChanging();
			entity.Lecture_Time = this;
		}
		
		private void detach_Selection_Times(Selection_Time entity)
		{
			this.SendPropertyChanging();
			entity.Lecture_Time = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecturer")]
	public partial class Lecturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Selection_Lecturer> _Selection_Lecturers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Lecturer()
		{
			this._Selection_Lecturers = new EntitySet<Selection_Lecturer>(new Action<Selection_Lecturer>(this.attach_Selection_Lecturers), new Action<Selection_Lecturer>(this.detach_Selection_Lecturers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_Selection_Lecturer", Storage="_Selection_Lecturers", ThisKey="Id", OtherKey="Lecturer_Id")]
		public EntitySet<Selection_Lecturer> Selection_Lecturers
		{
			get
			{
				return this._Selection_Lecturers;
			}
			set
			{
				this._Selection_Lecturers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Selection_Lecturers(Selection_Lecturer entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = this;
		}
		
		private void detach_Selection_Lecturers(Selection_Lecturer entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Selection_Lecturer")]
	public partial class Selection_Lecturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Selection_Id;
		
		private System.Nullable<int> _Lecturer_Id;
		
		private EntityRef<Lecturer> _Lecturer;
		
		private EntityRef<Subject_Selection> _Subject_Selection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSelection_IdChanging(System.Nullable<int> value);
    partial void OnSelection_IdChanged();
    partial void OnLecturer_IdChanging(System.Nullable<int> value);
    partial void OnLecturer_IdChanged();
    #endregion
		
		public Selection_Lecturer()
		{
			this._Lecturer = default(EntityRef<Lecturer>);
			this._Subject_Selection = default(EntityRef<Subject_Selection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Selection_Id", DbType="Int")]
		public System.Nullable<int> Selection_Id
		{
			get
			{
				return this._Selection_Id;
			}
			set
			{
				if ((this._Selection_Id != value))
				{
					if (this._Subject_Selection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSelection_IdChanging(value);
					this.SendPropertyChanging();
					this._Selection_Id = value;
					this.SendPropertyChanged("Selection_Id");
					this.OnSelection_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lecturer_Id", DbType="Int")]
		public System.Nullable<int> Lecturer_Id
		{
			get
			{
				return this._Lecturer_Id;
			}
			set
			{
				if ((this._Lecturer_Id != value))
				{
					if (this._Lecturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLecturer_IdChanging(value);
					this.SendPropertyChanging();
					this._Lecturer_Id = value;
					this.SendPropertyChanged("Lecturer_Id");
					this.OnLecturer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_Selection_Lecturer", Storage="_Lecturer", ThisKey="Lecturer_Id", OtherKey="Id", IsForeignKey=true)]
		public Lecturer Lecturer
		{
			get
			{
				return this._Lecturer.Entity;
			}
			set
			{
				Lecturer previousValue = this._Lecturer.Entity;
				if (((previousValue != value) 
							|| (this._Lecturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecturer.Entity = null;
						previousValue.Selection_Lecturers.Remove(this);
					}
					this._Lecturer.Entity = value;
					if ((value != null))
					{
						value.Selection_Lecturers.Add(this);
						this._Lecturer_Id = value.Id;
					}
					else
					{
						this._Lecturer_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lecturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Selection_Selection_Lecturer", Storage="_Subject_Selection", ThisKey="Selection_Id", OtherKey="Id", IsForeignKey=true)]
		public Subject_Selection Subject_Selection
		{
			get
			{
				return this._Subject_Selection.Entity;
			}
			set
			{
				Subject_Selection previousValue = this._Subject_Selection.Entity;
				if (((previousValue != value) 
							|| (this._Subject_Selection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject_Selection.Entity = null;
						previousValue.Selection_Lecturers.Remove(this);
					}
					this._Subject_Selection.Entity = value;
					if ((value != null))
					{
						value.Selection_Lecturers.Add(this);
						this._Selection_Id = value.Id;
					}
					else
					{
						this._Selection_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject_Selection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Selection_Time")]
	public partial class Selection_Time : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Selection_Id;
		
		private System.Nullable<int> _Lecture_Time_Id;
		
		private EntityRef<Lecture_Time> _Lecture_Time;
		
		private EntityRef<Subject_Selection> _Subject_Selection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSelection_IdChanging(System.Nullable<int> value);
    partial void OnSelection_IdChanged();
    partial void OnLecture_Time_IdChanging(System.Nullable<int> value);
    partial void OnLecture_Time_IdChanged();
    #endregion
		
		public Selection_Time()
		{
			this._Lecture_Time = default(EntityRef<Lecture_Time>);
			this._Subject_Selection = default(EntityRef<Subject_Selection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Selection_Id", DbType="Int")]
		public System.Nullable<int> Selection_Id
		{
			get
			{
				return this._Selection_Id;
			}
			set
			{
				if ((this._Selection_Id != value))
				{
					if (this._Subject_Selection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSelection_IdChanging(value);
					this.SendPropertyChanging();
					this._Selection_Id = value;
					this.SendPropertyChanged("Selection_Id");
					this.OnSelection_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lecture_Time_Id", DbType="Int")]
		public System.Nullable<int> Lecture_Time_Id
		{
			get
			{
				return this._Lecture_Time_Id;
			}
			set
			{
				if ((this._Lecture_Time_Id != value))
				{
					if (this._Lecture_Time.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLecture_Time_IdChanging(value);
					this.SendPropertyChanging();
					this._Lecture_Time_Id = value;
					this.SendPropertyChanged("Lecture_Time_Id");
					this.OnLecture_Time_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Time_Selection_Time", Storage="_Lecture_Time", ThisKey="Lecture_Time_Id", OtherKey="Id", IsForeignKey=true)]
		public Lecture_Time Lecture_Time
		{
			get
			{
				return this._Lecture_Time.Entity;
			}
			set
			{
				Lecture_Time previousValue = this._Lecture_Time.Entity;
				if (((previousValue != value) 
							|| (this._Lecture_Time.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture_Time.Entity = null;
						previousValue.Selection_Times.Remove(this);
					}
					this._Lecture_Time.Entity = value;
					if ((value != null))
					{
						value.Selection_Times.Add(this);
						this._Lecture_Time_Id = value.Id;
					}
					else
					{
						this._Lecture_Time_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lecture_Time");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Selection_Selection_Time", Storage="_Subject_Selection", ThisKey="Selection_Id", OtherKey="Id", IsForeignKey=true)]
		public Subject_Selection Subject_Selection
		{
			get
			{
				return this._Subject_Selection.Entity;
			}
			set
			{
				Subject_Selection previousValue = this._Subject_Selection.Entity;
				if (((previousValue != value) 
							|| (this._Subject_Selection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject_Selection.Entity = null;
						previousValue.Selection_Times.Remove(this);
					}
					this._Subject_Selection.Entity = value;
					if ((value != null))
					{
						value.Selection_Times.Add(this);
						this._Selection_Id = value.Id;
					}
					else
					{
						this._Selection_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject_Selection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Subject_Selection> _Subject_Selections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Subject()
		{
			this._Subject_Selections = new EntitySet<Subject_Selection>(new Action<Subject_Selection>(this.attach_Subject_Selections), new Action<Subject_Selection>(this.detach_Subject_Selections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Subject_Selection", Storage="_Subject_Selections", ThisKey="Id", OtherKey="Subject_Id")]
		public EntitySet<Subject_Selection> Subject_Selections
		{
			get
			{
				return this._Subject_Selections;
			}
			set
			{
				this._Subject_Selections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subject_Selections(Subject_Selection entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Subject_Selections(Subject_Selection entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject_Selection")]
	public partial class Subject_Selection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Subject_Id;
		
		private System.Nullable<int> _Hall_Id;
		
		private EntitySet<Selection_Lecturer> _Selection_Lecturers;
		
		private EntitySet<Selection_Time> _Selection_Times;
		
		private EntityRef<Lecture_Hall> _Lecture_Hall;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubject_IdChanging(System.Nullable<int> value);
    partial void OnSubject_IdChanged();
    partial void OnHall_IdChanging(System.Nullable<int> value);
    partial void OnHall_IdChanged();
    #endregion
		
		public Subject_Selection()
		{
			this._Selection_Lecturers = new EntitySet<Selection_Lecturer>(new Action<Selection_Lecturer>(this.attach_Selection_Lecturers), new Action<Selection_Lecturer>(this.detach_Selection_Lecturers));
			this._Selection_Times = new EntitySet<Selection_Time>(new Action<Selection_Time>(this.attach_Selection_Times), new Action<Selection_Time>(this.detach_Selection_Times));
			this._Lecture_Hall = default(EntityRef<Lecture_Hall>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_Id", DbType="Int")]
		public System.Nullable<int> Subject_Id
		{
			get
			{
				return this._Subject_Id;
			}
			set
			{
				if ((this._Subject_Id != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubject_IdChanging(value);
					this.SendPropertyChanging();
					this._Subject_Id = value;
					this.SendPropertyChanged("Subject_Id");
					this.OnSubject_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hall_Id", DbType="Int")]
		public System.Nullable<int> Hall_Id
		{
			get
			{
				return this._Hall_Id;
			}
			set
			{
				if ((this._Hall_Id != value))
				{
					if (this._Lecture_Hall.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHall_IdChanging(value);
					this.SendPropertyChanging();
					this._Hall_Id = value;
					this.SendPropertyChanged("Hall_Id");
					this.OnHall_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Selection_Selection_Lecturer", Storage="_Selection_Lecturers", ThisKey="Id", OtherKey="Selection_Id")]
		public EntitySet<Selection_Lecturer> Selection_Lecturers
		{
			get
			{
				return this._Selection_Lecturers;
			}
			set
			{
				this._Selection_Lecturers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Selection_Selection_Time", Storage="_Selection_Times", ThisKey="Id", OtherKey="Selection_Id")]
		public EntitySet<Selection_Time> Selection_Times
		{
			get
			{
				return this._Selection_Times;
			}
			set
			{
				this._Selection_Times.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Hall_Subject_Selection", Storage="_Lecture_Hall", ThisKey="Hall_Id", OtherKey="Id", IsForeignKey=true)]
		public Lecture_Hall Lecture_Hall
		{
			get
			{
				return this._Lecture_Hall.Entity;
			}
			set
			{
				Lecture_Hall previousValue = this._Lecture_Hall.Entity;
				if (((previousValue != value) 
							|| (this._Lecture_Hall.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture_Hall.Entity = null;
						previousValue.Subject_Selections.Remove(this);
					}
					this._Lecture_Hall.Entity = value;
					if ((value != null))
					{
						value.Subject_Selections.Add(this);
						this._Hall_Id = value.Id;
					}
					else
					{
						this._Hall_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lecture_Hall");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Subject_Selection", Storage="_Subject", ThisKey="Subject_Id", OtherKey="Id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Subject_Selections.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Subject_Selections.Add(this);
						this._Subject_Id = value.Id;
					}
					else
					{
						this._Subject_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Selection_Lecturers(Selection_Lecturer entity)
		{
			this.SendPropertyChanging();
			entity.Subject_Selection = this;
		}
		
		private void detach_Selection_Lecturers(Selection_Lecturer entity)
		{
			this.SendPropertyChanging();
			entity.Subject_Selection = null;
		}
		
		private void attach_Selection_Times(Selection_Time entity)
		{
			this.SendPropertyChanging();
			entity.Subject_Selection = this;
		}
		
		private void detach_Selection_Times(Selection_Time entity)
		{
			this.SendPropertyChanging();
			entity.Subject_Selection = null;
		}
	}
}
#pragma warning restore 1591
